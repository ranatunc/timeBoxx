import React, { useState } from 'react';
import {
  StyleSheet,
  Text,
  View,
  TouchableOpacity,
  Modal,
  TextInput,
  FlatList,
  SafeAreaView,
  Alert,
  KeyboardAvoidingView,
  Platform,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import DateTimePicker from '@react-native-community/datetimepicker';
import { Calendar } from 'react-native-calendars';

const TaskManager = () => {
  const [task, setTask] = useState('');
  const [tasks, setTasks] = useState([]);
  const [isDateModalVisible, setDateModalVisible] = useState(false);
  const [isTimeModalVisible, setTimeModalVisible] = useState(false);
  const [isNoteFieldVisible, setNoteFieldVisible] = useState(false);
  const [selectedDate, setSelectedDate] = useState(new Date());
  const [selectedTime, setSelectedTime] = useState(new Date());
  const [taskNote, setTaskNote] = useState('');
  const [isNoteModalVisible, setNoteModalVisible] = useState(false);
  const [isReminderModalVisible, setReminderModalVisible] = useState(false);



  const addTask = () => {
    if (!task.trim()) {
      Alert.alert('Hata', 'Lütfen bir ihtiyaç ekleyin.');
      return;
    }

    let taskDate = selectedDate.toLocaleDateString('tr-TR', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
    });

    let taskTime = `${selectedTime.getHours().toString().padStart(2, '0')}:${selectedTime
      .getMinutes()
      .toString()
      .padStart(2, '0')}`;

    const newTask = {
      id: Date.now().toString(),
      task: task.trim(),
      date: taskDate,
      time: taskTime,
      note: taskNote,
    };

    setTasks([...tasks, newTask]);
    setTask('');
    setTaskNote('');
    setNoteFieldVisible(false);
  };

  const deleteTask = (id) => {
    setTasks(tasks.filter((item) => item.id !== id));
  };

  const handleDateChange = (event, date) => {
    setSelectedDate(date || selectedDate);
    setDateModalVisible(false);
    setTimeModalVisible(true);
  };
  const saveNoteButton=()=>{
    addTask();
    setNoteModalVisible(false);
  }
  const reminderOptions = [
    { id: '1', label: 'Bugün içinde', time: 'Per 06:00' },
    { id: '2', label: 'Yarın', time: 'Cum 09:00' },
    { id: '3', label: 'Gelecek hafta', time: 'Pzt 09:00' },
    {
      id: '4',
      label: 'Tarih ve saat seçin',
      time: '>',
      onPress: () => {
        setReminderModalVisible(false);
        setDateModalVisible(true)
      },
    },
  ];
  const reminderAndTime=()=>{
    setReminderModalVisible(false);
    setTimeModalVisible(true);
  }


  return (
    <SafeAreaView style={styles.safeArea}>
      <KeyboardAvoidingView behavior={Platform.OS === 'ios' ? 'padding' : 'height'} style={styles.container} keyboardVerticalOffset={100}>
        <FlatList
          data={tasks}
          keyExtractor={(item) => item.id}
          renderItem={({ item }) => (
            <View style={styles.taskItem}>
              <View style={styles.taskDetails}>
              <Text style={styles.taskText}>{item.task}</Text>
              <Text style={styles.taskDate}>
                {item.date} - {item.time}
              </Text>
              {item.note ? <Text style={styles.taskNote}>{item.note}</Text> : null}
              </View>
              <TouchableOpacity onPress={() => deleteTask(item.id)} style={styles.deleteButton}>
                <Ionicons name="trash-outline" size={24} color="red" />
              </TouchableOpacity>
            </View>
          )}
          ListEmptyComponent={
            <Text style={styles.emptyListText}>Henüz bir görev eklenmedi.</Text>
          }
          contentContainerStyle={{ paddingBottom: 80 }}
        />

        <View style={styles.inputContainer}>
          <TextInput
            style={styles.textInput}
            placeholder="İhtiyaç girin..."
            placeholderTextColor="#d3d3d3"
            value={task}
            onChangeText={setTask}
            onSubmitEditing={addTask}
            autoFocus
          />
          <View style={styles.iconRow}>
            <View style={styles.iconSpacing} />
            <TouchableOpacity onPress={(saveNoteButton)=> setNoteModalVisible(true)} style={styles.noteLeft}>
              <Ionicons name="document-text-outline" size={30} color="#d3d3d3" />
            </TouchableOpacity>
            <TouchableOpacity onPress={() => setReminderModalVisible(true)} >
            <Ionicons name="alarm-outline" size={30} color="#d3d3d3" />
          </TouchableOpacity>
          </View>
        </View>
      </KeyboardAvoidingView>

      <Modal
        visible={isNoteModalVisible}
        animationType="slide"
        onRequestClose={() => setNoteModalVisible(false)}
      >
        <View style={styles.noteContainer}>
          <View style={styles.noteHeader}>
            <Text style={styles.noteTitle}>Not</Text>
            <TouchableOpacity onPress={saveNoteButton}>
              <Text style={styles.noteDoneButton}>Bitti</Text>
            </TouchableOpacity>
          </View>
          <TextInput
            style={styles.noteInput}
            placeholder="Not ekle"
            placeholderTextColor="#777"
            value={taskNote}
            onChangeText={setTaskNote}
            multiline
          />
        </View>
      </Modal>

      <Modal
        visible={isDateModalVisible}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setDateModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Calendar
              onDayPress={handleDateChange}
              markedDates={{
                [selectedDate.toISOString().split('T')[0]]: { selected: true, selectedColor: '#1E90FF' },
              }}
              theme={{
                selectedDayBackgroundColor: '#1E90FF',
                todayTextColor: '#FF4500',
                arrowColor: '#1E90FF',
              }}
            />
            <TouchableOpacity style={styles.saveButton} onPress={() => setDateModalVisible(false)}>
              <Text style={styles.saveButtonText}>Tamam</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>

      <Modal
        visible={isTimeModalVisible}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setTimeModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Saat Seç</Text>
            <DateTimePicker
              value={selectedTime}
              mode="time"
              display="spinner"
              onChange={(event, time) => setSelectedTime(time || selectedTime)}
            />
            <TouchableOpacity style={styles.saveButton} onPress={() => setTimeModalVisible(false)}>
              <Text style={styles.saveButtonText}>Ayarla</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
         {/* Anımsatıcı Modalı */}
         <Modal
        visible={isReminderModalVisible}
        transparent={true}
        animationType="slide"
        onRequestClose={() => setReminderModalVisible(false)}
      >
        <View style={styles.modalContainer}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Anımsatıcı</Text>
              <TouchableOpacity onPress={reminderAndTime}>
                <Text style={styles.doneButtonText}>Bitti</Text>
              </TouchableOpacity>
            </View>
            <FlatList
              data={reminderOptions}
              keyExtractor={(item) => item.id}
              renderItem={({ item }) => (
                <TouchableOpacity
                  style={styles.optionContainer}
                  onPress={item.onPress}
                >
                  <View style={styles.optionLeft}>
                    <Ionicons name="time-outline" size={24} color="#f08080" />
                    <Text style={styles.optionLabel}>{item.label}</Text>
                  </View>
                  <Text style={styles.optionTime}>{item.time}</Text>
                </TouchableOpacity>
              )}
            />
          </View>
        </View>
      </Modal>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  safeArea: {
    flex: 1,
    backgroundColor: '#ECEDF0',
  },
  container: {
    padding: 20,
    flex: 1,
  },
  iconRow: {
    flexDirection: 'row',
    alignItems: 'center',
    marginLeft: 10,
  },
  iconSpacing: {
    width: 20,
  },
  noteContainer: {
    flex: 1,
    backgroundColor: '#000',
    padding: 20,
  },
  noteHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 10,
  },
  noteTitle: {
    color: '#FFF',
    fontSize: 22,
    fontWeight: 'bold',
  },
  noteDoneButton: {
    color: '#1E90FF',
    fontSize: 18,
    marginTop:20,
  },
  noteInput: {
    flex: 1,
    color: '#FFF',
    fontSize: 18,
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#2C2C2C',
    borderRadius: 8,
    padding: 10,
    marginBottom: 10,
  },
  textInput: {
    flex: 1,
    color: '#FFF',
  },
  saveButton: {
    backgroundColor: '#28A745',
    padding: 12,
    borderRadius: 8,
    alignItems: 'center',
    marginBottom: 10,
  },
  saveButtonText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  taskItem: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    backgroundColor: '#28A745',
    padding: 15,
    borderRadius: 8,
    marginBottom: 10,
  },
  taskText: {
    color: '#FFF',
    fontSize: 16,
    fontWeight: 'bold',
  },
  taskDate: {
    color: '#B3B3B3',
    fontSize: 14,
    marginTop: 5,
  },
  taskNote: {
    color: '#AAAAAA',
    fontSize: 14,
    marginTop: 5,
  },
  emptyListText: {
    color: '#888',
    textAlign: 'center',
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'flex-end',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    backgroundColor: '#fff',
    borderTopLeftRadius: 20,
    borderTopRightRadius: 20,
    padding: 20,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',  // Yatayda ortalama
    alignSelf: 'center',  // Dikeyde ortalama
  },
  optionContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    paddingVertical: 15,
    borderBottomWidth: 1,
    borderBottomColor: '#ddd',
  },
  optionLeft: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  optionLabel: {
    fontSize: 16,
    color: '#000',
    marginLeft: 10,
  },
  optionTime: {
    fontSize: 14,
    color: '#888',
  },
  noteLeft: {
    marginRight: 10,
  },
  deleteButton: {
    padding: 5,
  },

});

export default TaskManager;