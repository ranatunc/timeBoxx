import React, { useState, useEffect } from 'react';
import {
  StyleSheet,
  Text,
  TextInput,
  TouchableOpacity,
  View,
  Modal,
  Platform,
} from 'react-native';
import DateTimePicker from '@react-native-community/datetimepicker';
import { useNavigation } from '@react-navigation/native'; 
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useTranslation } from 'react-i18next';

const AddEventScreen = () => {
  const { t } = useTranslation();

  const [username, setUsername] = useState('');
  const [date, setDate] = useState('');
  const [time, setTime] = useState('');
  const [location, setLocation] = useState('');
  const [description, setDescription] = useState('');
  const [markedDates, setMarkedDates] = useState({});


  const navigation = useNavigation(); 

  // Picker iÃ§in state
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showTimePicker, setShowTimePicker] = useState(false);
  const [selectedDate, setSelectedDate] = useState(new Date());

  // Tarih seÃ§imi
  const handleDateChange = (event, newDate) => {
    if (Platform.OS === 'android') {
      setShowDatePicker(false);
      if (event.type === 'set') {
        setDate(newDate.toISOString().split('T')[0]); // yyyy-mm-dd formatÄ±
      }
    } else {
      setSelectedDate(newDate || selectedDate);
    }
  };
  
  const generateRandomColor = () => {
    const letters = '0123456789ABCDEF';
    let color = '#';
    for (let i = 0; i < 6; i++) {
      color += letters[Math.floor(Math.random() * 16)];
    }
    return color;
  };
  
  
  // Saat seÃ§imi
  const handleTimeChange = (event, newTime) => {
    if (Platform.OS === 'android') {
      setShowTimePicker(false);
      if (event.type === 'set') {
        const formattedTime = newTime.toLocaleTimeString([], {
          hour: '2-digit',
          minute: '2-digit',
        }); // hh:mm formatÄ±
        setTime(formattedTime);
      }
    } else {
      setSelectedDate(newTime || selectedDate);
    }
  };

  const confirmDate = () => {
    setDate(selectedDate.toISOString().split('T')[0]); // yyyy-mm-dd formatÄ±
    setShowDatePicker(false);
  };

  const confirmTime = () => {
    const formattedTime = selectedDate.toLocaleTimeString([], {
      hour: '2-digit',
      minute: '2-digit',
    }); // hh:mm formatÄ±
    setTime(formattedTime);
    setShowTimePicker(false);
  };


  const handleAddEvent = async () => {
    
    const userId = await AsyncStorage.getItem('userId');

    // Girdi kontrolleri
    if (!username || !date || !time || !location || !description) {
      alert('LÃ¼tfen tÃ¼m alanlarÄ± doldurun!');
      return;
    }
  
    // Kanal ID'sini AsyncStorage'den al
    const activeChannel = await AsyncStorage.getItem('activeChannel');
    if (!activeChannel) {
      alert('Aktif kanal bulunamadÄ±!');
      return;
    }
  
    // Etkinlik verisini oluÅŸtur
    const eventData = {
      name: description,  // Changed 'title' to 'name' as per the backend requirement
      description,
      date,
      time,
      location,
      color: generateRandomColor(), // Renk oluÅŸturuluyor
      channelId: activeChannel,  // Aktif kanal ID'si
      userId: userId,  // KullanÄ±cÄ± ID'si
      username
    };
  
    try {
  
      // Fetch isteÄŸini gÃ¶nder
      const response = await fetch('http://localhost:3000/api/create-event', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(eventData),
      });
      
      const eventResponseData = await response.json();
  
      if (!response.ok) {
        throw new Error(eventResponseData.message || 'Etkinlik oluÅŸturulamadÄ±');
      }
      
      // âœ… **Etkinlik baÅŸarÄ±yla oluÅŸturuldu, ÅŸimdi bildirim ekleyelim**
      const notificationData = {
        title: 'Yeni Etkinlik!ðŸ“£',
        message: `ðŸ“… ${eventData.date} tarihinde ${description} etkinliÄŸi oluÅŸturuldu.`,
        eventId: eventResponseData._id, // Etkinlik ID'sini bildirime ekliyoruz
        userId, // Bildirimi etkinliÄŸi oluÅŸturan kiÅŸiye baÄŸlÄ±yoruz
        channelId: activeChannel, // Kanal bazlÄ± bildirim
      };
  
      const notificationResponse = await fetch('http://localhost:3000/api/notifications', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(notificationData),
      });
  
      const notificationResponseData = await notificationResponse.json();
  
      if (!notificationResponse.ok) {
        throw new Error(notificationResponseData.message || 'Bildirim oluÅŸturulamadÄ±');
      }
  
      console.log('Bildirim baÅŸarÄ±yla oluÅŸturuldu:', notificationResponseData);      
      // Etkinlik ekleme baÅŸarÄ±lÄ±ysa, HomePage'e yÃ¶nlendirme
      const updatedMarkedDates = {
        ...markedDates,
        [date]: {
          ...eventData,
          selected: true,
          marked: true,
        },
      };
      setMarkedDates(updatedMarkedDates);
  
      // SayfayÄ± gÃ¼ncelle
      navigation.navigate('HomePage', {
        markedDates: updatedMarkedDates,
      });
    } catch (error) {
      console.error('Error in API request:', error);
      alert('Etkinlik eklenirken bir hata oluÅŸtu, lÃ¼tfen tekrar deneyin.');
    }
};

  
  
  
  
  useEffect(() => {
    const getUsername = async () => {
      try {
        const user = await AsyncStorage.getItem('user');
        if (user) {
          const parsedUser = JSON.parse(user);
          setUsername(parsedUser.username);
        }
      } catch (error) {
        console.error('KullanÄ±cÄ± adÄ± alÄ±namadÄ±:', error);
      }
    };

    getUsername();
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.header}>ETKÄ°NLÄ°K EKLE</Text>

      {/* KullanÄ±cÄ± AlanÄ± */}
      <View style={styles.inputContainer}>
        <Text style={styles.labeluser}>KullanÄ±cÄ±: <Text style={styles.user}>{username}</Text> </Text>
      </View>

      {/* Tarih ve Saat AlanÄ± */}
      <View style={styles.rowContainer}>
        <View style={[styles.inputContainer, styles.rowInput]}>
          <Text style={styles.label}>Tarih:</Text>
          <TouchableOpacity
            style={styles.input}
            onPress={() => setShowDatePicker(true)}
          >
            <Text style={{ color: date ? '#000' : '#044a42' }}>
              {date || 'SeÃ§iniz'}
            </Text>
          </TouchableOpacity>
        </View>
        <View style={[styles.inputContainer, styles.rowInput]}>
          <Text style={styles.label}>Saat:</Text>
          <TouchableOpacity
            style={styles.input}
            onPress={() => setShowTimePicker(true)}
          >
            <Text style={{ color: time ? '#000' : '#044a42' }}>
              {time || 'SeÃ§iniz'}
            </Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Yer AlanÄ± */}
      <View style={styles.inputContainer}>
        <Text style={styles.label}>Yer:</Text>
        <TextInput
          style={styles.input}
          placeholderTextColor="#B0EACD"
          value={location}
          onChangeText={setLocation}
        />
      </View>

      {/* AÃ§Ä±klama AlanÄ± */}
      <View style={styles.inputContainer}>
        <Text style={styles.label}>AÃ§Ä±klama:</Text>
        <TextInput
          style={[styles.input, styles.descriptionInput]}
          placeholderTextColor="#B0EACD"
          value={description}
          onChangeText={setDescription}
          multiline
        />
      </View>

      {/* EKLE Butonu */}
      <TouchableOpacity
        style={[styles.addButton, { backgroundColor: '#044a42' }]}
        onPress={() => {
          handleAddEvent();
        }}
      >
        <Text style={styles.addButtonText}>EKLE</Text>
      </TouchableOpacity>

      {/* Tarih Picker (iOS iÃ§in Modal) */}
      {showDatePicker && Platform.OS === 'ios' && (
        <Modal transparent={true} animationType="slide">
          <View style={styles.modalContainer}>
            <View style={styles.pickerContainer}>
              <DateTimePicker
                value={selectedDate}
                mode="date"
                display="spinner"
                onChange={handleDateChange}
              />
              <View style={styles.modalButtons}>
                <TouchableOpacity
                  style={styles.modalButton}
                  onPress={() => setShowDatePicker(false)}
                >
                  <Text style={styles.modalButtonText}>Ä°ptal</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.modalButton}
                  onPress={confirmDate}
                >
                  <Text style={styles.modalButtonText}>Tamam</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>
      )}

      {/* Saat Picker (iOS iÃ§in Modal) */}
      {showTimePicker && Platform.OS === 'ios' && (
        <Modal transparent={true} animationType="slide">
          <View style={styles.modalContainer}>
            <View style={styles.pickerContainer}>
              <DateTimePicker
                value={selectedDate}
                mode="time"
                display="spinner"
                onChange={handleTimeChange}
              />
              <View style={styles.modalButtons}>
                <TouchableOpacity
                  style={styles.modalButton}
                  onPress={() => setShowTimePicker(false)}
                >
                  <Text style={styles.modalButtonText}>Ä°ptal</Text>
                </TouchableOpacity>
                <TouchableOpacity
                  style={styles.modalButton}
                  onPress={confirmTime}
                >
                  <Text style={styles.modalButtonText}>Tamam</Text>
                </TouchableOpacity>
              </View>
            </View>
          </View>
        </Modal>
      )}
    </View>
  );
};

export default AddEventScreen;


const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ECEDF0',
    padding: 20,
  },
  header: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#000',
    textAlign: 'center',
    marginBottom: 20,
  },
  inputContainer: {
    marginBottom: 15,
  },
  labeluser:{
    fontSize: 20,
    fontWeight: "bold",
    color: '#383838',
    marginBottom: 5,
  },
  user:{
    fontSize: 20,
    fontWeight: "lighter",
    color: '#062925',
    marginBottom: 5,
  },
  label: {
    fontSize: 16,
    fontWeight: "bold",
    color: '#383838',
    marginBottom: 5,
  },
  input: {
    borderWidth: 2,
    borderColor: '#3a9188',
    borderRadius: 10,
    padding: 10,
    fontSize: 14,
    color: '#000',
    backgroundColor: '#ECEDF0',
  },
  rowContainer: {
    flexDirection: 'row',
    justifyContent: 'space-between',
  },
  rowInput: {
    flex: 1,
    marginHorizontal: 5,
  },
  descriptionInput: {
    height: 80,
    textAlignVertical: 'top',
  },
  addButton: {
    marginTop: 50,
    borderRadius: 25,
    padding: 15,
    width: '50%',
    left:95,
    height: 50,
    justifyContent: 'center',
    alignItems: 'center',
  },
  addButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'flex-end',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  pickerContainer: {
    backgroundColor: '#ffffff',
    padding: 10,
    borderTopLeftRadius: 10,
    borderTopRightRadius: 10,
  },
  modalButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginTop: 10,
  },
  modalButton: {
    padding: 10,
  },
  modalButtonText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#48BD7E',
  },
  usernameDisplay: {
    fontSize: 18,
    color: '#28A745',
    textAlign: 'center',
    marginVertical: 10,
  },
  
});