import React, { useState, useEffect } from 'react';
import { StyleSheet, Text, View, Modal, TouchableOpacity } from 'react-native';
import { Calendar } from 'react-native-calendars';
import { useNavigation, useRoute } from '@react-navigation/native';
import { Ionicons } from '@expo/vector-icons';

const HomePage = () => {
  const navigation = useNavigation();
  const route = useRoute();

  const [markedDates, setMarkedDates] = useState({});
  const [selectedEvent, setSelectedEvent] = useState(null);
  const [isModalVisible, setModalVisible] = useState(false);
  const [loading, setLoading] = useState(false); // Loading state to show loading status
  const channelId = route.params?.channelId;

  useEffect(() => {
    // Loading başladığında "Loading..." mesajı gösterelim
    if (channelId) {
      setLoading(true);  // Loading'i true yapıyoruz
      fetchEventsFromDatabase(channelId);
    }
  }, [channelId]);

  useEffect(() => {
    console.log("markedDates güncellendi:", JSON.stringify(markedDates, null, 2));
  }, [markedDates]);

  const fetchEventsFromDatabase = async (channelId) => {
    try {
      console.log("fetchEventsFromDatabase çağrıldı, channelId:", channelId);

      const response = await fetch(`http://localhost:3000/api/events/${channelId}`);
      
      // Check if the response is valid
      if (!response.ok) {
        throw new Error('API isteği başarısız oldu');
      }

      const data = await response.json();
      console.log("Gelen API verisi:", JSON.stringify(data, null, 2));

      if (!data.events || !Array.isArray(data.events)) {
        console.error("HATA: API 'events' dizisini göndermedi!");
        setLoading(false);
        return;
      }

      const formattedEvents = {};
      data.events.forEach((event) => {
        const formattedDate = new Date(event.date).toISOString().split('T')[0];

        formattedEvents[formattedDate] = {
          marked: true,
          dotColor: "red",
          selected: true,
          selectedColor: "blue",
          user: event.users?.[0] || "Bilinmeyen Kullanıcı",
          time: event.time,
          location: event.location,
          description: event.description,
        };
      });

      console.log("İşlenmiş etkinlikler:", formattedEvents);

      setMarkedDates(formattedEvents);
    } catch (error) {
      console.error("Etkinlikler alınamadı:", error);
    } finally {
      setLoading(false); // Loading'i false yaparak "Loading..." mesajını kaldırıyoruz
    }
  };

  const handleDayPress = (day) => {
    const event = markedDates[day.dateString];
    if (event) {
      setSelectedEvent(event);
      setModalVisible(true);
    }
  };

  return (
    <View style={styles.container}>
      {loading ? (
        <Text>Loading...</Text> // Show loading text
      ) : (
        <Calendar
          style={styles.calendar}
          markedDates={markedDates}
          markingType={'dot'} // Nokta işaretleme türünü belirt
          onDayPress={handleDayPress}
        />
      )}

      {isModalVisible && selectedEvent && (
        <Modal visible={isModalVisible} transparent={true} animationType="slide">
          <View style={styles.modalContainer}>
            <View style={styles.modalContent}>
              <Text style={styles.modalHeader}>Etkinlik Detayları</Text>
              <Text style={styles.modalText}>Kullanıcı: {selectedEvent.user}</Text>
              <Text style={styles.modalText}>Saat: {selectedEvent.time}</Text>
              <Text style={styles.modalText}>Yer: {selectedEvent.location}</Text>
              <Text style={styles.modalText}>Açıklama: {selectedEvent.description}</Text>
              <TouchableOpacity style={styles.closeButton} onPress={() => setModalVisible(false)}>
                <Text style={styles.closeButtonText}>Kapat</Text>
              </TouchableOpacity>
            </View>
          </View>
        </Modal>
      )}

      <TouchableOpacity
        style={styles.addButton}
        onPress={() => navigation.navigate('AddEventScreen', { channelId })}
      >
        <Ionicons name="add" size={30} color="white" />
      </TouchableOpacity>
    </View>
  );
};

export default HomePage;

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#ECEDF0',
    justifyContent: 'center',
    alignItems: 'center',
  },
  calendar: {
    borderRadius: 10,
    elevation: 2,
    width: 400,
    height: 500,
    shadowColor: '#000',
    shadowOpacity: 0.1,
    shadowRadius: 5,
    marginTop: -100,
  },
  modalContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
  },
  modalContent: {
    width: 300,
    padding: 20,
    backgroundColor: '#ffffff',
    borderRadius: 10,
  },
  modalHeader: {
    fontSize: 20,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  modalText: {
    fontSize: 16,
    marginBottom: 5,
  },
  closeButton: {
    marginTop: 20,
    paddingVertical: 10,
    backgroundColor: '#28A745',
    borderRadius: 5,
    justifyContent: 'center',
    alignItems: 'center',
  },
  closeButtonText: {
    color: '#ffffff',
    fontWeight: 'bold',
  },
  addButton: {
    position: 'absolute',
    bottom: 30,
    right: 20,
    backgroundColor: '#4CAF50',
    borderRadius: 30,
    padding: 10,
  },
});
